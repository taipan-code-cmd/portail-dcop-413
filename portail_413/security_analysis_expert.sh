#!/bin/bash
set -euo pipefail

# =============================================================================
# ANALYSE DE S√âCURIT√â APPROFONDIE - EXPERT CYBERS√âCURIT√â
# √âvaluation Security by Design pour DCOP (413) Portail des Visites
# =============================================================================

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîí ANALYSE DE S√âCURIT√â APPROFONDIE - DCOP (413)${NC}"
echo -e "${BLUE}=============================================${NC}"
echo -e "Expert Cybers√©curit√© - Approche Security by Design"
echo -e "Date: $(date)"
echo ""

# Variables
SECURITY_SCORE=0
TOTAL_CHECKS=0
CRITICAL_ISSUES=0
HIGH_ISSUES=0
MEDIUM_ISSUES=0
LOW_ISSUES=0

check_security_item() {
    local description="$1"
    local check_command="$2"
    local severity="$3"  # CRITICAL, HIGH, MEDIUM, LOW
    local recommendation="$4"
    
    ((TOTAL_CHECKS++))
    
    if eval "$check_command" >/dev/null 2>&1; then
        echo -e "  ${GREEN}‚úì${NC} $description"
        ((SECURITY_SCORE++))
    else
        case $severity in
            "CRITICAL")
                echo -e "  ${RED}‚úó CRITIQUE:${NC} $description"
                echo -e "    ${RED}‚û§${NC} $recommendation"
                ((CRITICAL_ISSUES++))
                ;;
            "HIGH")
                echo -e "  ${RED}‚úó √âLEV√â:${NC} $description"
                echo -e "    ${YELLOW}‚û§${NC} $recommendation"
                ((HIGH_ISSUES++))
                ;;
            "MEDIUM")
                echo -e "  ${YELLOW}‚ö† MOYEN:${NC} $description"
                echo -e "    ${YELLOW}‚û§${NC} $recommendation"
                ((MEDIUM_ISSUES++))
                ;;
            "LOW")
                echo -e "  ${YELLOW}! FAIBLE:${NC} $description"
                echo -e "    ${BLUE}‚û§${NC} $recommendation"
                ((LOW_ISSUES++))
                ;;
        esac
    fi
}

echo -e "${PURPLE}üèóÔ∏è  1. ARCHITECTURE & D√âFENSE EN PROFONDEUR${NC}"
echo "================================================"

check_security_item \
    "Isolation r√©seau par conteneurs Docker" \
    "grep -q 'networks:' docker-compose.yml" \
    "HIGH" \
    "Impl√©menter l'isolation r√©seau avec des subnets d√©di√©s"

check_security_item \
    "Proxy reverse Nginx configur√©" \
    "test -f nginx/nginx.conf" \
    "HIGH" \
    "Configurer un proxy reverse pour masquer l'application"

check_security_item \
    "Utilisateurs non-root dans les conteneurs" \
    "grep -q 'USER.*[^r]oot' Dockerfile" \
    "CRITICAL" \
    "Cr√©er et utiliser des utilisateurs non-root dans tous les conteneurs"

check_security_item \
    "Capabilities Linux restreintes" \
    "grep -q 'cap_drop:' docker-compose.yml" \
    "HIGH" \
    "Impl√©menter le principe du moindre privil√®ge avec cap_drop/cap_add"

check_security_item \
    "Volumes tmpfs avec options s√©curis√©es" \
    "grep -q 'tmpfs:.*noexec' docker-compose.yml" \
    "MEDIUM" \
    "Configurer tmpfs avec noexec,nosuid pour pr√©venir l'ex√©cution de code"

echo ""
echo -e "${PURPLE}üîê 2. AUTHENTIFICATION & GESTION DES SESSIONS${NC}"
echo "============================================="

check_security_item \
    "Hachage Argon2 pour les mots de passe" \
    "grep -r 'argon2' Cargo.toml" \
    "CRITICAL" \
    "Migrer vers Argon2id pour le hachage des mots de passe"

check_security_item \
    "Politique de mots de passe robuste" \
    "grep -q 'validate_password_strength' src/security/password.rs" \
    "HIGH" \
    "Impl√©menter une validation stricte des mots de passe (14+ chars, complexit√©)"

check_security_item \
    "JWT avec secrets s√©curis√©s" \
    "grep -q 'JWT_SECRET_FILE' docker-compose.yml" \
    "CRITICAL" \
    "Utiliser des secrets Docker pour les cl√©s JWT"

check_security_item \
    "Gestion de session s√©curis√©e" \
    "test -f src/security/session_management.rs" \
    "HIGH" \
    "Impl√©menter une gestion de session avec expiration et rotation"

check_security_item \
    "Rate limiting sur authentification" \
    "grep -q 'limit_req_zone.*login' nginx/nginx.conf" \
    "HIGH" \
    "Configurer un rate limiting strict sur les endpoints d'authentification"

echo ""
echo -e "${PURPLE}üõ°Ô∏è  3. PROTECTION WEB (OWASP TOP 10)${NC}"
echo "====================================="

check_security_item \
    "Protection CSRF impl√©ment√©e" \
    "test -f src/security/csrf_protection.rs" \
    "CRITICAL" \
    "Impl√©menter la protection CSRF avec double submit cookies"

check_security_item \
    "Validation d'entr√©e centralis√©e" \
    "test -f src/security/input_validation.rs" \
    "CRITICAL" \
    "Centraliser la validation et sanitisation des entr√©es utilisateur"

check_security_item \
    "Headers de s√©curit√© configur√©s" \
    "grep -q 'X-Frame-Options\\|Content-Security-Policy' nginx/nginx.conf" \
    "HIGH" \
    "Configurer tous les headers de s√©curit√© (CSP, X-Frame-Options, etc.)"

check_security_item \
    "Protection XSS dans les templates" \
    "grep -q 'XSS' src/security/" \
    "HIGH" \
    "Impl√©menter l'√©chappement automatique dans les templates"

check_security_item \
    "Requ√™tes SQL pr√©par√©es (SQLx)" \
    "grep -q 'sqlx::query!' src/" \
    "CRITICAL" \
    "Utiliser exclusivement des requ√™tes pr√©par√©es pour pr√©venir l'injection SQL"

echo ""
echo -e "${PURPLE}üîí 4. CHIFFREMENT & CRYPTOGRAPHIE${NC}"
echo "=================================="

check_security_item \
    "TLS 1.3 configur√©" \
    "grep -q 'ssl_protocols.*TLSv1.3' nginx/nginx.conf" \
    "HIGH" \
    "Configurer TLS 1.3 minimum avec des ciphers s√©curis√©s"

check_security_item \
    "Chiffrement AES-256-GCM" \
    "grep -q 'aes-gcm' Cargo.toml" \
    "HIGH" \
    "Utiliser AES-256-GCM pour le chiffrement sym√©trique"

check_security_item \
    "Gestion s√©curis√©e des secrets" \
    "test -f src/security/secrets_manager.rs" \
    "CRITICAL" \
    "Impl√©menter un gestionnaire de secrets avec rotation automatique"

check_security_item \
    "HSTS configur√©" \
    "grep -q 'Strict-Transport-Security' nginx/nginx.conf" \
    "MEDIUM" \
    "Activer HSTS pour forcer HTTPS"

echo ""
echo -e "${PURPLE}üìä 5. MONITORING & AUDIT${NC}"
echo "========================"

check_security_item \
    "Logging de s√©curit√© centralis√©" \
    "test -f src/security/centralized_security_logger.rs" \
    "HIGH" \
    "Impl√©menter un logging de s√©curit√© centralis√© avec corr√©lation"

check_security_item \
    "Audit trail complet" \
    "test -f src/security/security_audit.rs" \
    "HIGH" \
    "Enregistrer toutes les actions sensibles avec horodatage"

check_security_item \
    "D√©tection d'intrusion" \
    "grep -q 'suspicious' src/security/" \
    "MEDIUM" \
    "Impl√©menter la d√©tection de patterns suspects"

check_security_item \
    "M√©triques de s√©curit√©" \
    "grep -q 'metrics' Cargo.toml" \
    "MEDIUM" \
    "Exposer des m√©triques de s√©curit√© pour monitoring"

echo ""
echo -e "${PURPLE}üö® 6. PROTECTION DDOS & RESILIENCE${NC}"
echo "=================================="

check_security_item \
    "Rate limiting multi-niveaux" \
    "grep -c 'limit_req_zone' nginx/nginx.conf | grep -q '[5-9]'" \
    "HIGH" \
    "Configurer des zones de rate limiting diff√©renci√©es"

check_security_item \
    "Protection contre slow HTTP attacks" \
    "grep -q 'client_body_timeout\\|client_header_timeout' nginx/nginx.conf" \
    "MEDIUM" \
    "Configurer des timeouts courts pour pr√©venir les attaques lentes"

check_security_item \
    "Limitation de la taille des requ√™tes" \
    "grep -q 'client_max_body_size' nginx/nginx.conf" \
    "MEDIUM" \
    "Limiter la taille des uploads pour pr√©venir l'√©puisement de ressources"

check_security_item \
    "Healthchecks configur√©s" \
    "grep -q 'healthcheck:' docker-compose.yml" \
    "LOW" \
    "Configurer des healthchecks pour d√©tecter les d√©faillances"

echo ""
echo -e "${PURPLE}üîç 7. S√âCURIT√â DES DONN√âES${NC}"
echo "=========================="

check_security_item \
    "Chiffrement de la base de donn√©es" \
    "grep -q 'sslmode=require' src/" \
    "HIGH" \
    "Activer le chiffrement TLS pour PostgreSQL"

check_security_item \
    "Rotation des cl√©s de chiffrement" \
    "test -f src/security/secret_rotation.rs" \
    "MEDIUM" \
    "Impl√©menter la rotation automatique des cl√©s"

check_security_item \
    "Nettoyage s√©curis√© de la m√©moire" \
    "grep -q 'zeroize' Cargo.toml" \
    "MEDIUM" \
    "Utiliser zeroize pour nettoyer les donn√©es sensibles en m√©moire"

check_security_item \
    "Validation des donn√©es en sortie" \
    "grep -q 'output.*encoding\\|sanitiz' src/" \
    "HIGH" \
    "Valider et encoder toutes les donn√©es en sortie"

echo ""
echo -e "${BLUE}üìà R√âSULTATS DE L'ANALYSE${NC}"
echo "========================="

SECURITY_PERCENTAGE=$((SECURITY_SCORE * 100 / TOTAL_CHECKS))

echo -e "Score de s√©curit√©: ${GREEN}"${SECURITY_SCORE}"${NC}/${BLUE}"${TOTAL_CHECKS}"${NC} (${GREEN}"${SECURITY_PERCENTAGE}"%${NC})"
echo -e "Issues critiques: ${RED}"${CRITICAL_ISSUES}"${NC}"
echo -e "Issues √©lev√©s: ${YELLOW}"${HIGH_ISSUES}"${NC}"
echo -e "Issues moyens: ${YELLOW}"${MEDIUM_ISSUES}"${NC}"
echo -e "Issues faibles: "${LOW_ISSUES}""

echo ""
echo -e "${PURPLE}üéØ √âVALUATION GLOBALE${NC}"
echo "===================="

if [ "${SECURITY_PERCENTAGE}" -ge 90 ]; then
    echo -e "${GREEN}üèÜ EXCELLENT${NC} - Application tr√®s s√©curis√©e"
    echo -e "Conforme aux standards OWASP et Security by Design"
elif [ "${SECURITY_PERCENTAGE}" -ge 75 ]; then
    echo -e "${YELLOW}‚úì BON${NC} - Niveau de s√©curit√© satisfaisant"
    echo -e "Quelques am√©liorations recommand√©es"
elif [ "${SECURITY_PERCENTAGE}" -ge 60 ]; then
    echo -e "${YELLOW}‚ö† ACCEPTABLE${NC} - S√©curit√© de base pr√©sente"
    echo -e "Corrections n√©cessaires avant production"
else
    echo -e "${RED}‚ùå INSUFFISANT${NC} - Risques de s√©curit√© importants"
    echo -e "R√©vision compl√®te requise"
fi

if [ "${CRITICAL_ISSUES}" -gt 0 ]; then
    echo -e "${RED}‚ö†Ô∏è  ATTENTION: "${CRITICAL_ISSUES}" issue(s) critique(s) d√©tect√©(s)${NC}"
    echo -e "Correction imm√©diate requise avant d√©ploiement"
fi

echo ""
echo -e "${BLUE}üìã RECOMMANDATIONS PRIORITAIRES${NC}"
echo "================================"

if [ "${CRITICAL_ISSUES}" -gt 0 ]; then
    echo -e "1. ${RED}CRITIQUE${NC}: Corriger tous les probl√®mes critiques"
fi

if [ "${HIGH_ISSUES}" -gt 0 ]; then
    echo -e "2. ${YELLOW}√âLEV√â${NC}: Impl√©menter les contr√¥les de s√©curit√© manquants"
fi

echo -e "3. ${BLUE}G√âN√âRAL${NC}: Effectuer un pentest avant mise en production"
echo -e "4. ${BLUE}G√âN√âRAL${NC}: Mettre en place un SOC pour le monitoring"
echo -e "5. ${BLUE}G√âN√âRAL${NC}: Formation s√©curit√© pour l'√©quipe de d√©veloppement"

echo ""
echo -e "${GREEN}‚úÖ Analyse de s√©curit√© termin√©e${NC}"
echo -e "Rapport g√©n√©r√© le: $(date)"
