#!/bin/bash
set -euo pipefail

# DCOP (413) - Script de Validation Finale de S√©curit√©
# G√©n√®re un rapport consolid√© de toutes les v√©rifications

set -e

echo "üîç DCOP (413) - VALIDATION FINALE DE S√âCURIT√â"
echo "============================================="
echo "Date: $(date '+%Y-%m-%d %H:%M:%S')"
echo ""

# Fonction pour afficher des r√©sultats avec couleurs
print_status() {
    local status=$1
    local message=$2
    case $status in
        "OK") echo "‚úÖ $message" ;;
        "WARNING") echo "‚ö†Ô∏è  $message" ;;
        "ERROR") echo "‚ùå $message" ;;
        "INFO") echo "‚ÑπÔ∏è  $message" ;;
    esac
}

# 1. V√©rification de la Structure de S√©curit√©
echo "üìÅ 1. V√âRIFICATION STRUCTURE DE S√âCURIT√â"
echo "----------------------------------------"

security_files=(
    "src/security/valkey_rate_limiting.rs"
    "src/security/rate_limiting_advanced.rs" 
    "src/security/secrets_manager.rs"
    "src/security/security_audit.rs"
    "src/security/security_config.rs"
    "src/security/mod.rs"
)

for file in "${security_files[@]}"; do
    if [[ -f "$file" ]]; then
        lines=$(wc -l < "$file")
        print_status "OK" "$file ($lines lignes)"
    else
        print_status "ERROR" "$file manquant"
    fi
done

# 2. V√©rification des D√©pendances Cryptographiques  
echo ""
echo "üîê 2. V√âRIFICATION D√âPENDANCES CRYPTO"
echo "-------------------------------------"

crypto_deps=(
    "argon2.*0\.5"
    "blake3.*1\.5" 
    "aes-gcm.*0\.10"
    "chacha20poly1305.*0\.10"
    "ring.*0\.17"
    "zeroize.*1\.8"
)

if [[ -f "Cargo.toml" ]]; then
    for dep in "${crypto_deps[@]}"; do
        if grep -q "$dep" Cargo.toml; then
            print_status "OK" "D√©pendance $dep trouv√©e"
        else
            print_status "WARNING" "D√©pendance $dep non trouv√©e ou version diff√©rente"
        fi
    done
else
    print_status "ERROR" "Cargo.toml non trouv√©"
fi

# 3. Analyse des Impl√©mentations de S√©curit√©
echo ""
echo "üõ°Ô∏è 3. ANALYSE IMPL√âMENTATIONS S√âCURIT√â"
echo "--------------------------------------"

# Rate Limiting  
if [[ -f "src/security/security_config.rs" ]] && grep -q "enum.*RateLimitAlgorithm" src/security/security_config.rs; then
    print_status "OK" "Rate Limiting avec algorithmes multiples d√©tect√©"
elif [[ -f "src/security/valkey_rate_limiting.rs" ]]; then
    print_status "OK" "Rate Limiting Valkey avanc√© d√©tect√©"
else
    print_status "WARNING" "Rate Limiting non d√©tect√©"
fi

# Authentification
if grep -r "Argon2" src/ >/dev/null 2>&1; then
    print_status "OK" "Hachage Argon2 impl√©ment√©"
else
    print_status "WARNING" "Argon2 non d√©tect√© dans le code"
fi

# Audit
if [[ -f "src/security/security_audit.rs" ]]; then
    if grep -q "AuditEventType" src/security/security_audit.rs; then
        print_status "OK" "Syst√®me d'audit complet d√©tect√©"
    else
        print_status "WARNING" "Audit basique d√©tect√©"
    fi
fi

# 4. V√©rification Configuration TLS/SSL
echo ""
echo "üåê 4. V√âRIFICATION TLS/SSL"
echo "-------------------------"

if [[ -d "nginx" ]]; then
    if find nginx -name "*.conf" -exec grep -l "ssl_protocols.*TLSv1.3" {} \; | head -1 >/dev/null; then
        print_status "OK" "Configuration TLS 1.3 trouv√©e"
    else
        print_status "WARNING" "TLS 1.3 non configur√© ou non trouv√©"
    fi
    
    if find nginx -name "*.conf" -exec grep -l "ssl_ciphers" {} \; | head -1 >/dev/null; then
        print_status "OK" "Configuration des ciphers SSL trouv√©e"
    else
        print_status "WARNING" "Configuration ciphers SSL manquante"
    fi
else
    print_status "INFO" "R√©pertoire nginx non trouv√© (configuration externe possible)"
fi

# 5. Compilation et Tests
echo ""
echo "ü¶Ä 5. COMPILATION ET TESTS"
echo "-------------------------"

# Test de compilation
echo "V√©rification de la compilation..."
if cargo check --quiet >/dev/null 2>&1; then
    print_status "OK" "Compilation r√©ussie"
else
    print_status "WARNING" "Erreurs de compilation d√©tect√©es"
fi

# V√©rification des tests de s√©curit√©
if [[ -f "tests/security_integration_tests.rs" ]]; then
    print_status "OK" "Tests de s√©curit√© int√©gr√©s pr√©sents"
else
    print_status "WARNING" "Tests de s√©curit√© int√©gr√©s manquants"
fi

# 6. Score Final et Recommandations
echo ""
echo "üìä 6. SCORE FINAL ET RECOMMANDATIONS"  
echo "===================================="

# Calcul du score bas√© sur les v√©rifications
score=0
max_score=20

# Points pour les fichiers de s√©curit√© (6 points max)
for file in "${security_files[@]}"; do
    [[ -f "$file" ]] && ((score++))
done

# Points pour les d√©pendances crypto (6 points max)  
for dep in "${crypto_deps[@]}"; do
    grep -q "${dep%%.*}" Cargo.toml 2>/dev/null && ((score++))
done

# Points pour la compilation (2 points)
cargo check --quiet >/dev/null 2>&1 && score=$((score + 2))

# Points pour les tests (2 points)
[[ -f "tests/security_integration_tests.rs" ]] && score=$((score + 2))

# Points pour TLS (4 points)
if [[ -d "nginx" ]]; then
    find nginx -name "*.conf" -exec grep -l "ssl_protocols.*TLSv1.3" {} \; | head -1 >/dev/null && score=$((score + 2))
    find nginx -name "*.conf" -exec grep -l "ssl_ciphers" {} \; | head -1 >/dev/null && score=$((score + 2))
fi

percentage=$((score * 100 / max_score))

echo ""
echo "üéØ R√âSULTAT FINAL:"
echo "=================="
echo "Score: $score/$max_score ($percentage%)"

if [[ $percentage -ge 90 ]]; then
    print_status "OK" "EXCELLENT - Pr√™t pour la production"
    echo "üöÄ L'application respecte tous les standards de s√©curit√© modernes"
elif [[ $percentage -ge 75 ]]; then
    print_status "OK" "BON - Quelques am√©liorations mineures recommand√©es"
elif [[ $percentage -ge 60 ]]; then
    print_status "WARNING" "ACCEPTABLE - Am√©liorations n√©cessaires avant production"
else
    print_status "ERROR" "INSUFFISANT - Corrections majeures requises"
fi

echo ""
echo "üìã RECOMMANDATIONS PRIORITAIRES:"
echo "================================"

if [[ $score -lt 12 ]]; then
    echo "üî¥ PRIORIT√â HAUTE:"
    echo "  - Compl√©ter l'impl√©mentation des modules de s√©curit√©"
    echo "  - Ajouter les d√©pendances cryptographiques manquantes"
    echo "  - R√©soudre les erreurs de compilation"
fi

if [[ $score -lt 16 ]]; then
    echo "üü° PRIORIT√â MOYENNE:"  
    echo "  - Am√©liorer la configuration TLS/SSL"
    echo "  - Ajouter des tests de s√©curit√© automatis√©s"
    echo "  - Valider les impl√©mentations rate limiting"
fi

echo "üü¢ PRIORIT√â FAIBLE:"
echo "  - Ajouter MFA/2FA pour les administrateurs"
echo "  - Int√©grer un syst√®me HSM/Vault"
echo "  - Impl√©menter la rotation automatique des cl√©s"

echo ""
echo "üìÑ RAPPORTS G√âN√âR√âS:"
echo "==================="
print_status "INFO" "RAPPORT_SCAN_SECURITE_PROFOND.md"
print_status "INFO" "VALIDATION_FINALE_RECOMMANDATIONS.md"
print_status "INFO" "validation_finale_securite.sh (ce script)"

echo ""
echo "‚úÖ Validation finale termin√©e le $(date '+%Y-%m-%d %H:%M:%S')"
