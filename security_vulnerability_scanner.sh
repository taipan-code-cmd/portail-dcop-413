#!/bin/bash
set -euo pipefail

# üîí SCANNER DE VULN√âRABILIT√âS AUTOMATIQUE - DCOP-413
# Expert Cybers√©curit√© - Analyse automatis√©e
# Date: 26 ao√ªt 2025

set -euo pipefail

# Couleurs pour la sortie
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

# Variables globales
CRITICAL_COUNT=0
HIGH_COUNT=0
MEDIUM_COUNT=0
LOW_COUNT=0
TOTAL_CHECKS=0

echo "üîí DCOP-413 SECURITY VULNERABILITY SCANNER"
echo "=========================================="
echo "Date: $(date)"
echo "Expert: Cybersecurity Specialist"
echo ""

# Fonction pour afficher les r√©sultats
check_vulnerability() {
    local test_name="$1"
    local command="$2"
    local severity="$3"
    local description="$4"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    echo -n "["${TOTAL_CHECKS}"] Testing: $test_name... "
    
    if eval "$command" >/dev/null 2>&1; then
        case $severity in
            "CRITICAL")
                echo -e "${RED}VULN√âRABLE [CRITIQUE]${NC}"
                echo "    üî¥ $description"
                CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
                ;;
            "HIGH")
                echo -e "${YELLOW}VULN√âRABLE [√âLEV√â]${NC}"
                echo "    üü° $description"
                HIGH_COUNT=$((HIGH_COUNT + 1))
                ;;
            "MEDIUM")
                echo -e "${YELLOW}VULN√âRABLE [MOYEN]${NC}"
                echo "    ‚ö†Ô∏è  $description"
                MEDIUM_COUNT=$((MEDIUM_COUNT + 1))
                ;;
            "LOW")
                echo -e "${BLUE}VULN√âRABLE [FAIBLE]${NC}"
                echo "    ‚ÑπÔ∏è  $description"
                LOW_COUNT=$((LOW_COUNT + 1))
                ;;
        esac
    else
        echo -e "${GREEN}S√âCURIS√â${NC}"
    fi
    echo ""
}

cd /home/taipan_51/portail_413

echo "üîç 1. ANALYSE DES SECRETS ET CONFIGURATION"
echo "==========================================="

check_vulnerability \
    "Secrets en clair sur disque" \
    "test -f portail_413/secrets/jwt_secret.txt && test -r portail_413/secrets/jwt_secret.txt" \
    "CRITICAL" \
    "JWT secret stock√© en plain text - Risque de compromission totale"

check_vulnerability \
    "Mot de passe PostgreSQL en clair" \
    "test -f portail_413/secrets/postgres_password.txt" && test -r portail_413/secrets/postgres_password.txt"" \
    "CRITICAL" \
    "Password DB en plain text - Acc√®s direct possible √† la base"

check_vulnerability \
    "Cl√©s de chiffrement expos√©es" \
    "test -f portail_413/secrets/encryption_key.txt && test -r portail_413/secrets/encryption_key.txt" \
    "CRITICAL" \
    "Cl√© de chiffrement en plain text - D√©chiffrement des donn√©es possible"

check_vulnerability \
    "Variables d'environnement sensibles" \
    "grep -r 'password.*=' portail_413/.env* 2>/dev/null" \
    "HIGH" \
    "Credentials dans variables d'environnement"

echo "üåê 2. ANALYSE DE LA CONFIGURATION WEB"
echo "====================================="

check_vulnerability \
    "HTTPS non activ√©" \
    "! grep -q 'listen.*443.*ssl' portail_413/nginx/nginx.conf" \
    "CRITICAL" \
    "Pas de HTTPS configur√© - Traffic interceptable"

check_vulnerability \
    "Headers CSP manquants" \
    "! grep -q 'Content-Security-Policy' portail_413/nginx/nginx.conf" \
    "HIGH" \
    "Content Security Policy absent - Vuln√©rable aux XSS"

check_vulnerability \
    "Referrer-Policy manquant" \
    "! grep -q 'Referrer-Policy' portail_413/nginx/nginx.conf" \
    "MEDIUM" \
    "Referrer Policy absent - Fuite d'informations possible"

check_vulnerability \
    "Permissions-Policy manquant" \
    "! grep -q 'Permissions-Policy' portail_413/nginx/nginx.conf" \
    "MEDIUM" \
    "Permissions Policy absent - Acc√®s non contr√¥l√© aux APIs"

check_vulnerability \
    "Rate limiting trop permissif" \
    "grep -q 'rate.*100r/s' portail_413/nginx/nginx.conf" \
    "MEDIUM" \
    "Limitation de taux trop √©lev√©e - Vuln√©rable aux attaques DoS"

echo "ü¶Ä 3. ANALYSE DU CODE BACKEND (RUST)"
echo "==================================="

check_vulnerability \
    "Utilisation de bcrypt obsol√®te" \
    "grep -q 'use bcrypt' portail_413/src/security/password.rs" \
    "HIGH" \
    "bcrypt vuln√©rable aux GPU - Migrer vers Argon2id"

check_vulnerability \
    "Co√ªt bcrypt insuffisant" \
    "grep -q 'BCRYPT_COST.*= 12' portail_413/src/security/password.rs" \
    "HIGH" \
    "Co√ªt bcrypt 12 insuffisant contre hardware moderne"

check_vulnerability \
    "Session timeout trop long" \
    "grep -q 'SESSION_TIMEOUT.*3600' portail_413/docker-compose.yml" \
    "MEDIUM" \
    "Timeout de session 1h trop long - Risque de hijacking"

check_vulnerability \
    "JWT secret statique" \
    "! grep -q 'jwt.*rotat' portail_413/src/services/auth_service.rs" \
    "HIGH" \
    "Pas de rotation des JWT secrets - Compromission durable"

check_vulnerability \
    "Validation de mot de passe faible" \
    "grep -q 'password.len() < 12' portail_413/src/security/password.rs" \
    "MEDIUM" \
    "Validation mot de passe 12 chars insuffisante"

echo "üóÑÔ∏è 4. ANALYSE DE LA BASE DE DONN√âES"
echo "==================================="

check_vulnerability \
    "TLS PostgreSQL non activ√©" \
    "! grep -q 'ssl.*on' portail_413/config/postgresql.conf 2>/dev/null" \
    "HIGH" \
    "Communications DB non chiffr√©es"

check_vulnerability \
    "Authentification PostgreSQL faible" \
    "grep -q 'md5' portail_413/docker-compose.yml" \
    "MEDIUM" \
    "MD5 auth faible - Utiliser SCRAM-SHA-256"

check_vulnerability \
    "Logs d'audit PostgreSQL absents" \
    "! grep -q 'log_statement.*all' portail_413/config/postgresql.conf 2>/dev/null" \
    "MEDIUM" \
    "Pas de logs d'audit des requ√™tes SQL"

echo "üîí 5. ANALYSE DES PERMISSIONS ET ACC√àS"
echo "======================================"

check_vulnerability \
    "Permissions secrets trop ouvertes" \
    "find portail_413/secrets -type f ! -perm 600 | head -1" \
    "HIGH" \
    "Permissions secrets non restreintes √† owner seulement"

check_vulnerability \
    "Conteneurs Docker privil√©gi√©s" \
    "grep -q 'privileged.*true' portail_413/docker-compose.yml" \
    "HIGH" \
    "Conteneurs avec privil√®ges √©lev√©s - Escalation possible"

check_vulnerability \
    "Ports r√©seau expos√©s inutilement" \
    "grep -q '0.0.0.0.*5432' portail_413/docker-compose.yml" \
    "MEDIUM" \
    "Base de donn√©es expos√©e sur toutes interfaces"

echo "üìä 6. ANALYSE DES LOGS ET MONITORING"
echo "===================================="

check_vulnerability \
    "Logs de s√©curit√© insuffisants" \
    "! find portail_413/src -name '*.rs' -exec grep -l 'security.*log\\|audit.*log' {} \\;" \
    "MEDIUM" \
    "Pas de logs d'√©v√©nements de s√©curit√©"

check_vulnerability \
    "Monitoring d'intrusion absent" \
    "! test -f portail_413/docker-compose.monitoring.yml" \
    "MEDIUM" \
    "Pas de syst√®me de d√©tection d'intrusion"

check_vulnerability \
    "Alertes automatiques absentes" \
    "! grep -r 'alert\\|notification' portail_413/scripts/" \
    "LOW" \
    "Pas d'alertes automatiques pour √©v√©nements critiques"

echo "üß™ 7. TESTS DE P√âN√âTRATION AUTOMATIQUES"
echo "======================================="

# Test de l'application si elle est en cours d'ex√©cution
if curl --max-time 10 --retry 3 -s http://localhost:8080/health >/dev/null 2>&1; then
    echo "Application d√©tect√©e en cours d'ex√©cution. Tests en ligne..."
    
    check_vulnerability \
        "Endpoint de sant√© expose des infos" \
        "curl --max-time 10 --retry 3 -s http://localhost:8080/health | grep -E '(version|database|internal)'" \
        "LOW" \
        "Endpoint /health expose des informations syst√®me"
    
    check_vulnerability \
        "D√©tection d'√©num√©ration utilisateurs" \
        "time curl --max-time 10 --retry 3 -s -o /dev/null -w '%{time_total}' http://localhost:8080/api/auth/login -d '{\"username\":\"admin\",\"password\":\"wrong\"}' | awk '{if(\$1 > 0.5) exit 0; else exit 1}'" \
        "MEDIUM" \
        "Timing attack possible pour √©num√©ration d'utilisateurs"
    
    check_vulnerability \
        "CORS mal configur√©" \
        "curl --max-time 10 --retry 3 -s -H 'Origin: https://evil.com' http://localhost:8080/api/public/health | grep -q 'Access-Control-Allow-Origin: \\*'" \
        "HIGH" \
        "CORS permet tous les domaines - Vuln√©rable aux attaques cross-origin"
        
else
    echo "‚ö†Ô∏è  Application non accessible - Tests en ligne ignor√©s"
fi

echo ""
echo "üìã R√âSUM√â DE L'ANALYSE DE S√âCURIT√â"
echo "=================================="
echo -e "Total des v√©rifications: "${TOTAL_CHECKS}""
echo -e "üî¥ Vuln√©rabilit√©s CRITIQUES: ${RED}"${CRITICAL_COUNT}"${NC}"
echo -e "üü° Vuln√©rabilit√©s √âLEV√âES: ${YELLOW}"${HIGH_COUNT}"${NC}"
echo -e "‚ö†Ô∏è  Vuln√©rabilit√©s MOYENNES: ${YELLOW}"${MEDIUM_COUNT}"${NC}"
echo -e "‚ÑπÔ∏è  Vuln√©rabilit√©s FAIBLES: ${BLUE}"${LOW_COUNT}"${NC}"

echo ""
echo "üéØ √âVALUATION GLOBALE DE S√âCURIT√â"
echo "================================="

TOTAL_VULNS=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))
SECURITY_SCORE=$((100 - (CRITICAL_COUNT * 25) - (HIGH_COUNT * 15) - (MEDIUM_COUNT * 8) - (LOW_COUNT * 2)))

if [ "${SECURITY_SCORE}" -lt 0 ]; then
    SECURITY_SCORE=0
fi

echo -e "Score de s√©curit√©: "${SECURITY_SCORE}"/100"

if [ "${CRITICAL_COUNT}" -gt 0 ]; then
    echo -e "üö® ${RED}STATUT: RISQUE CRITIQUE - D√âPLOIEMENT INTERDIT${NC}"
    echo -e "üìã Actions requises: Corriger TOUTES les vuln√©rabilit√©s critiques"
elif [ "${HIGH_COUNT}" -gt 3 ]; then
    echo -e "‚ö†Ô∏è  ${YELLOW}STATUT: RISQUE √âLEV√â - D√âPLOIEMENT D√âCONSEILL√â${NC}"
    echo -e "üìã Actions requises: Corriger les vuln√©rabilit√©s √©lev√©es prioritaires"
elif [ "${MEDIUM_COUNT}" -gt 5 ]; then
    echo -e "‚ö†Ô∏è  ${YELLOW}STATUT: RISQUE MOYEN - D√âPLOIEMENT AVEC PR√âCAUTIONS${NC}"
    echo -e "üìã Actions requises: Planifier corrections moyennes"
else
    echo -e "‚úÖ ${GREEN}STATUT: ACCEPTABLE POUR D√âPLOIEMENT${NC}"
    echo -e "üìã Actions requises: Monitoring continu"
fi

echo ""
echo "üìä RECOMMANDATIONS PRIORITAIRES"
echo "==============================="

if [ "${CRITICAL_COUNT}" -gt 0 ]; then
    echo "1. üî¥ PRIORIT√â 0 (< 24h): S√©curiser les secrets et activer HTTPS"
fi

if [ "${HIGH_COUNT}" -gt 0 ]; then
    echo "2. üü° PRIORIT√â 1 (< 7j): Migrer vers Argon2, am√©liorer headers s√©curit√©"
fi

if [ "${MEDIUM_COUNT}" -gt 0 ]; then
    echo "3. ‚ö†Ô∏è  PRIORIT√â 2 (< 30j): Renforcer monitoring et logs d'audit"
fi

echo ""
echo "üìÅ RAPPORTS D√âTAILL√âS G√âN√âR√âS:"
echo "- AUDIT_CYBERSECURITE_COMPLET.md"
echo "- ANALYSE_VULNERABILITES_TECHNIQUES.md"
echo ""
echo "üîí Analyse termin√©e - Rapport confidentiel"

# Code de sortie bas√© sur la criticit√©
if [ "${CRITICAL_COUNT}" -gt 0 ]; then
    exit 3  # Critique
elif [ "${HIGH_COUNT}" -gt 3 ]; then
    exit 2  # √âlev√©
elif [ "${MEDIUM_COUNT}" -gt 5 ]; then
    exit 1  # Moyen
else
    exit 0  # Acceptable
fi
